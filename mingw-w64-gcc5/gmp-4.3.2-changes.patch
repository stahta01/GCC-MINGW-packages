diff -r 456550117e63 -r de30972da69d doc/gmp.texi
--- a/doc/gmp.texi	Mon Jan 04 01:31:44 2010 +0100
+++ b/doc/gmp.texi	Thu Jan 07 14:11:11 2010 +0100
@@ -5334,40 +5334,47 @@
 negative value if @math{@var{s1} < @var{s2}}.
 @end deftypefun
 
-@deftypefun mp_size_t mpn_gcd (mp_limb_t *@var{rp}, mp_limb_t *@var{s1p}, mp_size_t @var{s1n}, mp_limb_t *@var{s2p}, mp_size_t @var{s2n})
-Set @{@var{rp}, @var{retval}@} to the greatest common divisor of @{@var{s1p},
-@var{s1n}@} and @{@var{s2p}, @var{s2n}@}.  The result can be up to @var{s2n}
-limbs, the return value is the actual number produced.  Both source operands
-are destroyed.
-
-@{@var{s1p}, @var{s1n}@} must have at least as many bits as @{@var{s2p},
-@var{s2n}@}.  @{@var{s2p}, @var{s2n}@} must be odd.  Both operands must have
-non-zero most significant limbs.  No overlap is permitted between @{@var{s1p},
-@var{s1n}@} and @{@var{s2p}, @var{s2n}@}.
-@end deftypefun
-
-@deftypefun mp_limb_t mpn_gcd_1 (const mp_limb_t *@var{s1p}, mp_size_t @var{s1n}, mp_limb_t @var{s2limb})
-Return the greatest common divisor of @{@var{s1p}, @var{s1n}@} and
-@var{s2limb}.  Both operands must be non-zero.
-@end deftypefun
-
-@deftypefun mp_size_t mpn_gcdext (mp_limb_t *@var{r1p}, mp_limb_t *@var{r2p}, mp_size_t *@var{r2n}, mp_limb_t *@var{s1p}, mp_size_t @var{s1n}, mp_limb_t *@var{s2p}, mp_size_t @var{s2n})
-Calculate the greatest common divisor of @{@var{s1p}, @var{s1n}@} and
-@{@var{s2p}, @var{s2n}@}.  Store the gcd at @{@var{r1p}, @var{retval}@} and
-the first cofactor at @{@var{r2p}, *@var{r2n}@}, with *@var{r2n} negative if
-the cofactor is negative.  @var{r1p} and @var{r2p} should each have room for
-@math{@var{s1n}+1} limbs, but the return value and value stored through
-@var{r2n} indicate the actual number produced.
-
-@math{@{@var{s1p}, @var{s1n}@} @ge{} @{@var{s2p}, @var{s2n}@}} is required,
-and both must be non-zero.  The regions @{@var{s1p}, @math{@var{s1n}+1}@} and
-@{@var{s2p}, @math{@var{s2n}+1}@} are destroyed (i.e.@: the operands plus an
-extra limb past the end of each).
-
-The cofactor @var{r2} will satisfy @m{r_2 s_1 + k s_2 = r_1, @var{r2}*@var{s1}
-+ @var{k}*@var{s2} = @var{r1}}.  The second cofactor @var{k} is not calculated
-but can easily be obtained from @m{(r_1 - r_2 s_1) / s_2, (@var{r1} -
-@var{r2}*@var{s1}) / @var{s2}} (this division will be exact).
+@deftypefun mp_size_t mpn_gcd (mp_limb_t *@var{rp}, mp_limb_t *@var{xp}, mp_size_t @var{xn}, mp_limb_t *@var{yp}, mp_size_t @var{yn})
+Set @{@var{rp}, @var{retval}@} to the greatest common divisor of @{@var{xp},
+@var{xn}@} and @{@var{yp}, @var{yn}@}.  The result can be up to @var{yn} limbs,
+the return value is the actual number produced.  Both source operands are
+destroyed.
+
+@{@var{xp}, @var{xn}@} must have at least as many bits as @{@var{yp},
+@var{yn}@}.  @{@var{yp}, @var{yn}@} must be odd.  Both operands must have
+non-zero most significant limbs.  No overlap is permitted between @{@var{xp},
+@var{xn}@} and @{@var{yp}, @var{yn}@}.
+@end deftypefun
+
+@deftypefun mp_limb_t mpn_gcd_1 (const mp_limb_t *@var{xp}, mp_size_t @var{xn}, mp_limb_t @var{ylimb})
+Return the greatest common divisor of @{@var{xp}, @var{xn}@} and @var{ylimb}.
+Both operands must be non-zero.
+@end deftypefun
+
+@deftypefun mp_size_t mpn_gcdext (mp_limb_t *@var{gp}, mp_limb_t *@var{sp}, mp_size_t *@var{sn}, mp_limb_t *@var{xp}, mp_size_t @var{xn}, mp_limb_t *@var{yp}, mp_size_t @var{yn})
+Let @m{U,@var{U}} be defined by @{@var{xp}, @var{xn}@} and let @m{V,@var{V}} be
+defined by @{@var{yp}, @var{yn}@}.
+
+Compute the greatest common divisor @math{G} of @math{U} and @math{V}.  Compute
+a cofactor @math{S} such that @math{G = US + VT}.  The second cofactor @var{T}
+is not computed but can easily be obtained from @m{(G - US) / V, (@var{G} -
+@var{U}*@var{S}) / @var{V}} (the division will be exact).  It is required that
+@math{U @ge V > 0}.
+
+@math{S} satisfies @math{S = 1} or @math{@GMPabs{S} < V / (2 G)}. @math{S =
+0} if and only if @math{V} divides @math{U} (i.e., @math{G = V}).
+
+Store @math{G} at @var{gp} and let the return value define its limb count.
+Store @math{S} at @var{sp} and let |*@var{sn}| define its limb count.  @math{S}
+can be negative; when this happens *@var{sn} will be negative.  The areas at
+@var{gp} and @var{sp} should each have room for @math{@var{xn}+1} limbs.
+
+The areas @{@var{xp}, @math{@var{xn}+1}@} and @{@var{yp}, @math{@var{yn}+1}@}
+are destroyed (i.e.@: the input operands plus an extra limb past the end of
+each).
+
+Compatibility note: GMP 4.3.0 and 4.3.1 defined @math{S} less strictly.
+Earlier as well as later GMP releases define @math{S} as described here.
 @end deftypefun
 
 @deftypefun mp_size_t mpn_sqrtrem (mp_limb_t *@var{r1p}, mp_limb_t *@var{r2p}, const mp_limb_t *@var{sp}, mp_size_t @var{n})
# HG changeset patch
# User Torbjorn Granlund <tege@gmplib.org>
# Date 1262877403 -3600
#      Thu Jan 07 16:16:43 2010 +0100
# Node ID 9d3415ef9dbbc8d04a5163e753a9ad1ab71fdae7
# Parent  de30972da69d100d523582ba50267646c296433c
*** empty log message ***

diff -r de30972da69d -r 9d3415ef9dbb ChangeLog
--- a/ChangeLog	Thu Jan 07 14:11:11 2010 +0100
+++ b/ChangeLog	Thu Jan 07 16:16:43 2010 +0100
@@ -1,4 +1,4 @@
-2010-01-04  Torbjorn Granlund  <tege@gmplib.org>
+2010-01-07  Torbjorn Granlund  <tege@gmplib.org>
 
 	* Version 4.3.2 released.
 
# HG changeset patch
# User Torbjorn Granlund <tege@gmplib.org>
# Date 1265533219 -3600
#      Sun Feb 07 10:00:19 2010 +0100
# Node ID a7de6127e187a29a36b579c6f760a42bba6b1be4
# Parent  9d3415ef9dbbc8d04a5163e753a9ad1ab71fdae7
Fix a typo.

diff -r 9d3415ef9dbb -r a7de6127e187 ChangeLog
--- a/ChangeLog	Thu Jan 07 16:16:43 2010 +0100
+++ b/ChangeLog	Sun Feb 07 10:00:19 2010 +0100
@@ -1,3 +1,8 @@
+2010-02-07  Torbjorn Granlund  <tege@gmplib.org>
+
+	* mpn/x86_64/aorrlsh_n.asm (cnt): Fix a typo.
+	* mpn/x86_64/lshsub_n.asm: Likewise.
+
 2010-01-07  Torbjorn Granlund  <tege@gmplib.org>
 
 	* Version 4.3.2 released.
diff -r 9d3415ef9dbb -r a7de6127e187 mpn/x86_64/aorrlsh_n.asm
--- a/mpn/x86_64/aorrlsh_n.asm	Thu Jan 07 16:16:43 2010 +0100
+++ b/mpn/x86_64/aorrlsh_n.asm	Sun Feb 07 10:00:19 2010 +0100
@@ -41,7 +41,7 @@
 define(`up',	`%rsi')
 define(`vp',	`%rdx')
 define(`n',	`%rcx')
-define(`cnt'	`%r8')
+define(`cnt',	`%r8')
 
 ifdef(`OPERATION_addlsh_n',`
   define(ADDSUBC,       `adc')
diff -r 9d3415ef9dbb -r a7de6127e187 mpn/x86_64/lshsub_n.asm
--- a/mpn/x86_64/lshsub_n.asm	Thu Jan 07 16:16:43 2010 +0100
+++ b/mpn/x86_64/lshsub_n.asm	Sun Feb 07 10:00:19 2010 +0100
@@ -39,7 +39,7 @@
 define(`up',	`%rsi')
 define(`vp',	`%rdx')
 define(`n',	`%rcx')
-define(`cnt'	`%r8')
+define(`cnt',	`%r8')
 
 ASM_START()
 	TEXT
# HG changeset patch
# User Marco Bodrato <bodrato@mail.dm.unipi.it>
# Date 1265614308 -3600
#      Mon Feb 08 08:31:48 2010 +0100
# Node ID c44d519435fb4546c26752717ddc9857205f71eb
# Parent  a7de6127e187a29a36b579c6f760a42bba6b1be4
Backported Intel processors recognition from 5.0.1 .

diff -r a7de6127e187 -r c44d519435fb ChangeLog
--- a/ChangeLog	Sun Feb 07 10:00:19 2010 +0100
+++ b/ChangeLog	Mon Feb 08 08:31:48 2010 +0100
@@ -1,3 +1,7 @@
+2010-02-08  Marco Bodrato  <bodrato@mail.dm.unipi.it>
+
+	* config.guess: Recognise many more Intel processors.
+
 2010-02-07  Torbjorn Granlund  <tege@gmplib.org>
 
 	* mpn/x86_64/aorrlsh_n.asm (cnt): Fix a typo.
diff -r a7de6127e187 -r c44d519435fb config.guess
--- a/config.guess	Sun Feb 07 10:00:19 2010 +0100
+++ b/config.guess	Mon Feb 08 08:31:48 2010 +0100
@@ -736,8 +736,14 @@
 	  else if (model <= 14)	modelstr = "pentiumm";
 	  else if (model <= 25)	modelstr = "core2";
 	  else if (model <= 27)	modelstr = "core2"; /* core i5, i7 */
-	  else if (model == 28)	modelstr = "atom";
-	  else if (model == 29)	modelstr = "core2";
+	  else if (model == 28)	modelstr = "atom";  /* Silverthorne */
+	  else if (model == 29)	modelstr = "core2"; /* PNR Dunnington */
+	  else if (model == 0x1e)	modelstr = "core2"; /* NHM Lynnfield/Jasper */
+	  else if (model == 0x25)	modelstr = "core2"; /* WSM Clarkdale/Arrandale */
+	  else if (model == 0x26)	modelstr = "atom";  /* Lincroft */
+	  else if (model == 0x27)	modelstr = "atom";  /* Saltwell */
+	  else if (model == 0x2c)	modelstr = "core2"; /* WSM Gulftown */
+	  else if (model == 0x2e)	modelstr = "core2"; /* NHM Beckton */
 	  break;
 	case 15:
 	  modelstr = "pentium4";
# HG changeset patch
# User Marco Bodrato <bodrato@mail.dm.unipi.it>
# Date 1265618271 -3600
#      Mon Feb 08 09:37:51 2010 +0100
# Node ID 9400582f6b84a1224be68e90baf0c7898a945f41
# Parent  c44d519435fb4546c26752717ddc9857205f71eb
Fix typos.

diff -r c44d519435fb -r 9400582f6b84 configure.in
--- a/configure.in	Mon Feb 08 08:31:48 2010 +0100
+++ b/configure.in	Mon Feb 08 09:37:51 2010 +0100
@@ -967,7 +967,7 @@
             # longlong.h macros expect limb operands in a single 64-bit
             # register, not two 32-bit registers as would be given for a
             # long long without -mpowerpc64.  In theory we could detect and
-            # accomodate both styles, but the proper 64-bit registers will
+            # accommodate both styles, but the proper 64-bit registers will
             # be fastest and are what we really want to use.
             #
 	    # One would think -mpowerpc64 would set the assembler in the right
@@ -1692,10 +1692,10 @@
           cflags="$cflags_maybe $cflags"
         fi
 
-        # Any user CFLAGS, even an empty string, takes precendence
+        # Any user CFLAGS, even an empty string, takes precedence
         if test "$test_CFLAGS" = set; then cflags=$CFLAGS; fi
 
-        # Any user CPPFLAGS, even an empty string, takes precendence
+        # Any user CPPFLAGS, even an empty string, takes precedence
                                eval cppflags=\"\$${ccbase}${abi1}_cppflags\"
         test -n "$cppflags" || eval cppflags=\"\$${ccbase}${abi2}_cppflags\"
         if test "$test_CPPFLAGS" = set; then cppflags=$CPPFLAGS; fi
@@ -2514,7 +2514,7 @@
 # setup that structure, on a per-directory basis ready for
 # mpn/<cpu>/fat/fat.c.
 #
-# fat.h includes thesholds listed in $fat_thresholds, extracted from
+# fat.h includes thresholds listed in $fat_thresholds, extracted from
 # gmp-mparam.h in each directory.  An overall maximum for each threshold is
 # established, for use in making fixed size arrays of temporary space.
 # (Eg. MUL_TOOM3_THRESHOLD_LIMIT used by mpn/generic/mul.c.)
@@ -2565,7 +2565,7 @@
   echo "
 /* Copy all fields into __gmpn_cpuvec.
    memcpy is not used because it might operate byte-wise (depending on its
-   implemenation), and we need the function pointer writes to be atomic.
+   implementation), and we need the function pointer writes to be atomic.
    "volatile" discourages the compiler from trying to optimize this.  */
 #define CPUVEC_INSTALL(vec) \\
   do { \\
@@ -2627,7 +2627,7 @@
     esac
 
     # Extract desired thresholds from gmp-mparam.h file in this directory,
-    # if prsent.
+    # if present.
     tmp_mparam=$srcdir/mpn/$tmp_dir/gmp-mparam.h
     if test -f $tmp_mparam; then
       for tmp_tn in $fat_thresholds; do
@@ -3095,7 +3095,7 @@
 # Sizes of some types, needed at preprocessing time.
 #
 # FIXME: The assumption that BITS_PER_MP_LIMB is 8*sizeof(mp_limb_t) might
-# be slightly rash, but it's true everwhere we know of and ought to be true
+# be slightly rash, but it's true everywhere we know of and ought to be true
 # of any sensible system.  In a generic C build, grepping LONG_BIT out of
 # <limits.h> might be an alternative, for maximum portability.
 #
# HG changeset patch
# User Marco Bodrato <bodrato@mail.dm.unipi.it>
# Date 1265621031 -3600
#      Mon Feb 08 10:23:51 2010 +0100
# Node ID 0c87a74fd8af899547b8622bab7dfe0c3f9b9c6e
# Parent  9400582f6b84a1224be68e90baf0c7898a945f41
Backport atom-32 options.

diff -r 9400582f6b84 -r 0c87a74fd8af acinclude.m4
--- a/acinclude.m4	Mon Feb 08 09:37:51 2010 +0100
+++ b/acinclude.m4	Mon Feb 08 10:23:51 2010 +0100
@@ -1,8 +1,8 @@
 dnl  GMP specific autoconf macros
 
 
-dnl  Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009 Free Software
-dnl  Foundation, Inc.
+dnl  Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2009, 2010 Free
+dnl  Software Foundation, Inc.
 dnl
 dnl  This file is part of the GNU MP Library.
 dnl
@@ -44,8 +44,10 @@
 [[powerpc64-*-* | powerpc64le-*-* | powerpc620-*-* | powerpc630-*-* | powerpc970-*-* | power[3-9]-*-*]])
 
 define(X86_PATTERN,
-[[i?86*-*-* | k[5-8]*-*-* | pentium*-*-* | athlon-*-* | viac3*-*-* | geode*-*-*]])
-
+[[i?86*-*-* | k[5-8]*-*-* | pentium*-*-* | athlon-*-* | viac3*-*-* | geode*-*-* | atom-*-*]])
+
+define(X86_64_PATTERN,
+[[athlon64-*-* | atom-*-* | core2-*-* | x86_64-*-* ]])
 
 dnl  GMP_FAT_SUFFIX(DSTVAR, DIRECTORY)
 dnl  ---------------------------------
diff -r 9400582f6b84 -r 0c87a74fd8af config.guess
--- a/config.guess	Mon Feb 08 09:37:51 2010 +0100
+++ b/config.guess	Mon Feb 08 10:23:51 2010 +0100
@@ -3,7 +3,7 @@
 # GMP config.guess wrapper.
 
 
-# Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008 Free Software
+# Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2010 Free Software
 # Foundation, Inc.
 #
 # This file is part of the GNU MP Library.
diff -r 9400582f6b84 -r 0c87a74fd8af configure.in
--- a/configure.in	Mon Feb 08 09:37:51 2010 +0100
+++ b/configure.in	Mon Feb 08 10:23:51 2010 +0100
@@ -4,7 +4,7 @@
 define(GMP_COPYRIGHT,[[
 
 Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
-2007 Free Software Foundation, Inc.
+2007, 2010 Free Software Foundation, Inc.
 
 This file is part of the GNU MP Library.
 
@@ -1281,7 +1281,7 @@
   # mode, in case -m32 has failed not because it's an old gcc, but because
   # it's a dual 32/64-bit gcc without a 32-bit libc, or whatever.
   #
-  X86_PATTERN | athlon64-*-* | atom-*-* | core2-*-* | x86_64-*-*)
+  X86_PATTERN | X86_64_PATTERN)
     abilist="32"
     cclist="gcc icc cc"
     gcc_cflags="$gcc_cflags $fomit_frame_pointer"
@@ -1409,6 +1409,10 @@
         gcc_cflags_cpu="-mtune=core2 -mtune=k8"
         gcc_cflags_arch="-march=core2 -march=core2~-mno-sse2 -march=k8 -march=k8~-mno-sse2"
         ;;
+      atom)
+        gcc_cflags_cpu="-mtune=atom -mtune=pentium3"
+        gcc_cflags_arch="-march=atom -march=pentium3"
+        ;;
       *)
         gcc_cflags_cpu="-mtune=i486 -mcpu=i486 -m486"
         gcc_cflags_arch="-march=i486"
@@ -1434,6 +1438,7 @@
       # VIA/Centaur processors, sold as CyrixIII and C3.
       viac32)               path="x86/p6/p3mmx x86/p6/mmx x86/p6 x86";;
       viac3*)               path="x86/pentium/mmx x86/pentium x86";;
+      atom)                 path="x86/atom x86" ;;
       *)                    path="x86" ;;
     esac
 
@@ -2037,7 +2042,7 @@
 # enough assembler.
 #
 case $host in
-  X86_PATTERN | athlon64-*-* | atom-*-* | core2-*-* | x86_64-*-*)
+  X86_PATTERN | X86_64_PATTERN)
     if test "$ABI" = 32; then
       case "$path $fat_path" in
         *mmx*)   GMP_ASM_X86_MMX( , [GMP_STRIP_PATH(*mmx*)]) ;;
@@ -3017,7 +3022,7 @@
           ;;
       esac
       ;;
-    X86_PATTERN | athlon64-*-* | atom-*-* | core2-*-* | x86_64-*-*)
+    X86_PATTERN | X86_64_PATTERN)
       GMP_ASM_ALIGN_FILL_0x90
       case $ABI in
         32)
# HG changeset patch
# User Marco Bodrato <bodrato@mail.dm.unipi.it>
# Date 1265626976 -3600
#      Mon Feb 08 12:02:56 2010 +0100
# Node ID 95d35d1a5b904732266a2918a08018262f8b5e13
# Parent  0c87a74fd8af899547b8622bab7dfe0c3f9b9c6e
Changelog.

diff -r 0c87a74fd8af -r 95d35d1a5b90 ChangeLog
--- a/ChangeLog	Mon Feb 08 10:23:51 2010 +0100
+++ b/ChangeLog	Mon Feb 08 12:02:56 2010 +0100
@@ -1,5 +1,8 @@
 2010-02-08  Marco Bodrato  <bodrato@mail.dm.unipi.it>
 
+	* acinclude.m4 (X86_64_PATTERN): New.
+	* configure.in: Compiler options for atom-32, and use
+	X86_64_PATTERN.
 	* config.guess: Recognise many more Intel processors.
 
 2010-02-07  Torbjorn Granlund  <tege@gmplib.org>
# HG changeset patch
# User Marco Bodrato <bodrato@mail.dm.unipi.it>
# Date 1265627207 -3600
#      Mon Feb 08 12:06:47 2010 +0100
# Node ID dde3c881e7ce52bc7a9cbd27bb36d0ef0e39322c
# Parent  95d35d1a5b904732266a2918a08018262f8b5e13
Tuned parameter for atom-32.

diff -r 95d35d1a5b90 -r dde3c881e7ce mpn/x86/atom/gmp-mparam.h
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/mpn/x86/atom/gmp-mparam.h	Mon Feb 08 12:06:47 2010 +0100
@@ -0,0 +1,65 @@
+/* Intel Atom/32 gmp-mparam.h -- Compiler/machine parameter header file.
+
+Copyright 1991, 1993, 1994, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
+2008, 2009, 2010 Free Software Foundation, Inc.
+
+This file is part of the GNU MP Library.
+
+The GNU MP Library is free software; you can redistribute it and/or modify
+it under the terms of the GNU Lesser General Public License as published by
+the Free Software Foundation; either version 3 of the License, or (at your
+option) any later version.
+
+The GNU MP Library is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
+License for more details.
+
+You should have received a copy of the GNU Lesser General Public License
+along with the GNU MP Library.  If not, see http://www.gnu.org/licenses/.  */
+
+#define GMP_LIMB_BITS 32
+#define BYTES_PER_MP_LIMB 4
+
+/* Generated by tuneup.c */
+
+#define MUL_KARATSUBA_THRESHOLD          16
+#define MUL_TOOM3_THRESHOLD              73
+#define MUL_TOOM44_THRESHOLD            171
+
+#define SQR_BASECASE_THRESHOLD            0  /* always (native) */
+#define SQR_KARATSUBA_THRESHOLD          16
+#define SQR_TOOM3_THRESHOLD             113
+#define SQR_TOOM4_THRESHOLD             169
+
+#define MULLOW_BASECASE_THRESHOLD         0  /* always */
+#define MULLOW_DC_THRESHOLD              48
+#define MULLOW_MUL_N_THRESHOLD          330
+
+#define DIV_SB_PREINV_THRESHOLD           0  /* always */
+#define DIV_DC_THRESHOLD                 58
+#define POWM_THRESHOLD                   81
+
+#define MATRIX22_STRASSEN_THRESHOLD      19
+#define HGCD_THRESHOLD                  116
+#define GCD_DC_THRESHOLD                380
+#define GCDEXT_DC_THRESHOLD             403
+#define JACOBI_BASE_METHOD                3
+
+#define USE_PREINV_DIVREM_1               1
+#define USE_PREINV_MOD_1                  1
+#define DIVEXACT_1_THRESHOLD              0  /* always (native) */
+#define MODEXACT_1_ODD_THRESHOLD          0  /* always */
+
+#define GET_STR_DC_THRESHOLD             13
+#define GET_STR_PRECOMPUTE_THRESHOLD     27
+#define SET_STR_DC_THRESHOLD            272
+#define SET_STR_PRECOMPUTE_THRESHOLD    894
+
+#define MUL_FFT_TABLE  { 336, 672, 896, 2560, 6144, 24576, 98304, 393216, 1572864, 6291456, 0 }
+#define MUL_FFT_MODF_THRESHOLD          328
+#define MUL_FFT_THRESHOLD              2816
+
+#define SQR_FFT_TABLE  { 336, 672, 896, 2560, 6144, 24576, 98304, 393216, 1572864, 6291456, 0 }
+#define SQR_FFT_MODF_THRESHOLD          264
+#define SQR_FFT_THRESHOLD              1792
# HG changeset patch
# User Marco Bodrato <bodrato@mail.dm.unipi.it>
# Date 1265628335 -3600
#      Mon Feb 08 12:25:35 2010 +0100
# Node ID 46c976c624538e645fe24037f85b0d7bae69d4e4
# Parent  dde3c881e7ce52bc7a9cbd27bb36d0ef0e39322c
Changelog.

diff -r dde3c881e7ce -r 46c976c62453 ChangeLog
--- a/ChangeLog	Mon Feb 08 12:06:47 2010 +0100
+++ b/ChangeLog	Mon Feb 08 12:25:35 2010 +0100
@@ -1,5 +1,7 @@
 2010-02-08  Marco Bodrato  <bodrato@mail.dm.unipi.it>
 
+	* mpn/x86/atom/gmp-mparam.h: New file.
+
 	* acinclude.m4 (X86_64_PATTERN): New.
 	* configure.in: Compiler options for atom-32, and use
 	X86_64_PATTERN.
# HG changeset patch
# User Marco Bodrato <bodrato@mail.dm.unipi.it>
# Date 1268204613 -3600
#      Wed Mar 10 08:03:33 2010 +0100
# Node ID 2fab0bbcffb4b0730d7ea46364bd1ff94cde4dca
# Parent  46c976c624538e645fe24037f85b0d7bae69d4e4
Remove duplicated word.

diff -r 46c976c62453 -r 2fab0bbcffb4 doc/gmp.texi
--- a/doc/gmp.texi	Mon Feb 08 12:25:35 2010 +0100
+++ b/doc/gmp.texi	Wed Mar 10 08:03:33 2010 +0100
@@ -1795,7 +1795,7 @@
 
 will generate better contents for the @file{gmp-mparam.h} parameter file.
 
-To use the results, put the output in the file file indicated in the
+To use the results, put the output in the file indicated in the
 @samp{Parameters for ...} header.  Then recompile from scratch.
 
 The @code{tuneup} program takes one useful parameter, @samp{-f NNN}, which
# HG changeset patch
# User Torbjorn Granlund <tege@gmplib.org>
# Date 1289473304 -3600
#      Thu Nov 11 12:01:44 2010 +0100
# Node ID 73e16a6f90e35f8672bfea27e22ed1fe495dd1e3
# Parent  46c976c624538e645fe24037f85b0d7bae69d4e4
Remove documentation for non-existing function mpn_sqr_n.

diff -r 46c976c62453 -r 73e16a6f90e3 ChangeLog
--- a/ChangeLog	Mon Feb 08 12:25:35 2010 +0100
+++ b/ChangeLog	Thu Nov 11 12:01:44 2010 +0100
@@ -1,3 +1,8 @@
+2010-11-11  Torbjorn Granlund  <tege@gmplib.org>
+
+	* doc/gmp.texi (Low-level Functions): Remove documentation for
+	non-existing function mpn_sqr_n.
+
 2010-02-08  Marco Bodrato  <bodrato@mail.dm.unipi.it>
 
 	* mpn/x86/atom/gmp-mparam.h: New file.
diff -r 46c976c62453 -r 73e16a6f90e3 doc/gmp.texi
--- a/doc/gmp.texi	Mon Feb 08 12:25:35 2010 +0100
+++ b/doc/gmp.texi	Thu Nov 11 12:01:44 2010 +0100
@@ -5133,8 +5133,6 @@
 The destination has to have space for 2*@var{n} limbs, even if the product's
 most significant limb is zero.  No overlap is permitted between the
 destination and either source.
-
-If the two input operands are the same, use @code{mpn_sqr_n}.
 @end deftypefun
 
 @deftypefun mp_limb_t mpn_mul (mp_limb_t *@var{rp}, const mp_limb_t *@var{s1p}, mp_size_t @var{s1n}, const mp_limb_t *@var{s2p}, mp_size_t @var{s2n})
@@ -5149,15 +5147,6 @@
 This function requires that @var{s1n} is greater than or equal to @var{s2n}.
 @end deftypefun
 
-@deftypefun void mpn_sqr_n (mp_limb_t *@var{rp}, const mp_limb_t *@var{s1p}, mp_size_t @var{n})
-Compute the square of @{@var{s1p}, @var{n}@} and write the 2*@var{n}-limb
-result to @var{rp}.
-
-The destination has to have space for 2*@var{n} limbs, even if the result's
-most significant limb is zero.  No overlap is permitted between the
-destination and the source.
-@end deftypefun
-
 @deftypefun mp_limb_t mpn_mul_1 (mp_limb_t *@var{rp}, const mp_limb_t *@var{s1p}, mp_size_t @var{n}, mp_limb_t @var{s2limb})
 Multiply @{@var{s1p}, @var{n}@} by @var{s2limb}, and write the @var{n} least
 significant limbs of the product to @var{rp}.  Return the most significant
# HG changeset patch
# User Torbjorn Granlund <tege@gmplib.org>
# Date 1289473340 -3600
#      Thu Nov 11 12:02:20 2010 +0100
# Node ID 23bc00ec2a0669791c4845e72fde6fef631a80bf
# Parent  73e16a6f90e35f8672bfea27e22ed1fe495dd1e3
# Parent  2fab0bbcffb4b0730d7ea46364bd1ff94cde4dca
Trivial merge.

diff -r 73e16a6f90e3 -r 23bc00ec2a06 doc/gmp.texi
--- a/doc/gmp.texi	Thu Nov 11 12:01:44 2010 +0100
+++ b/doc/gmp.texi	Thu Nov 11 12:02:20 2010 +0100
@@ -1795,7 +1795,7 @@
 
 will generate better contents for the @file{gmp-mparam.h} parameter file.
 
-To use the results, put the output in the file file indicated in the
+To use the results, put the output in the file indicated in the
 @samp{Parameters for ...} header.  Then recompile from scratch.
 
 The @code{tuneup} program takes one useful parameter, @samp{-f NNN}, which
# HG changeset patch
# User Torbjorn Granlund <tege@gmplib.org>
# Date 1289480998 -3600
#      Thu Nov 11 14:09:58 2010 +0100
# Node ID 1a2742d53add129651d223c20eb9e0ecdcb2a544
# Parent  23bc00ec2a0669791c4845e72fde6fef631a80bf
Don't rely on ZF after 'bt' insn.

diff -r 23bc00ec2a06 -r 1a2742d53add ChangeLog
--- a/ChangeLog	Thu Nov 11 12:02:20 2010 +0100
+++ b/ChangeLog	Thu Nov 11 14:09:58 2010 +0100
@@ -1,8 +1,15 @@
 2010-11-11  Torbjorn Granlund  <tege@gmplib.org>
 
+	* mpn/x86_64/atom/aors_n.asm: Don't rely on ZF after 'bt' insn.
+	Use 64-bit 'test' to support operands of 2^32 limbs and more.
+
 	* doc/gmp.texi (Low-level Functions): Remove documentation for
 	non-existing function mpn_sqr_n.
 
+2010-11-06  Torbjorn Granlund  <tege@gmplib.org>
+
+	* mpn/x86_64/aors_n.asm: Rewrite not to rely on ZF after 'bt' insn.
+
 2010-02-08  Marco Bodrato  <bodrato@mail.dm.unipi.it>
 
 	* mpn/x86/atom/gmp-mparam.h: New file.
diff -r 23bc00ec2a06 -r 1a2742d53add mpn/x86_64/aors_n.asm
--- a/mpn/x86_64/aors_n.asm	Thu Nov 11 12:02:20 2010 +0100
+++ b/mpn/x86_64/aors_n.asm	Thu Nov 11 14:09:58 2010 +0100
@@ -1,6 +1,7 @@
 dnl  AMD64 mpn_add_n, mpn_sub_n
 
-dnl  Copyright 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.
+dnl  Copyright 2003, 2004, 2005, 2007, 2008, 2010 Free Software Foundation,
+dnl  Inc.
 
 dnl  This file is part of the GNU MP Library.
 
@@ -52,24 +53,57 @@
 	ALIGN(16)
 PROLOGUE(func_nc)
 	mov	R32(n), R32(%rax)
+	shr	$2, n
 	and	$3, R32(%rax)
-	shr	$2, n
 	bt	$0, %r8			C cy flag <- carry parameter
-	jz	L(1)
-	jmp	L(ent)
+	jrcxz	L(lt4)
+
+	mov	(up), %r8
+	mov	8(up), %r9
+	dec	n
+	jmp	L(mid)
+
 EPILOGUE()
 	ALIGN(16)
 PROLOGUE(func)
 	mov	R32(n), R32(%rax)
 	shr	$2, n
-	jz	L(0)
 	and	$3, R32(%rax)
+	jrcxz	L(lt4)
 
-L(ent):	mov	(up), %r8
+	mov	(up), %r8
 	mov	8(up), %r9
 	dec	n
 	jmp	L(mid)
 
+L(lt4):	dec	R32(%rax)
+	mov	(up), %r8
+	jnz	L(2)
+	ADCSBB	(vp), %r8
+	mov	%r8, (rp)
+	adc	%eax, %eax
+	ret
+
+L(2):	dec	R32(%rax)
+	mov	8(up), %r9
+	jnz	L(3)
+	ADCSBB	(vp), %r8
+	ADCSBB	8(vp), %r9
+	mov	%r8, (rp)
+	mov	%r9, 8(rp)
+	adc	%eax, %eax
+	ret
+
+L(3):	mov	16(up), %r10
+	ADCSBB	(vp), %r8
+	ADCSBB	8(vp), %r9
+	ADCSBB	16(vp), %r10
+	mov	%r8, (rp)
+	mov	%r9, 8(rp)
+	mov	%r10, 16(rp)
+	setc	R8(%rax)
+	ret
+
 	ALIGN(16)
 L(top):	ADCSBB	(vp), %r8
 	ADCSBB	8(vp), %r9
@@ -103,36 +137,7 @@
 
 	inc	R32(%rax)
 	dec	R32(%rax)
-	jnz	L(1)
-	adc	%eax, %eax
-	ret
-
-L(0):	test	R32(%rax), R32(%rax)
-L(1):	dec	R32(%rax)
-	mov	(up), %r8
-	jnz	L(2)
-	ADCSBB	(vp), %r8
-	mov	%r8, (rp)
+	jnz	L(lt4)
 	adc	%eax, %eax
 	ret
-
-L(2):	dec	R32(%rax)
-	mov	8(up), %r9
-	jnz	L(3)
-	ADCSBB	(vp), %r8
-	ADCSBB	8(vp), %r9
-	mov	%r8, (rp)
-	mov	%r9, 8(rp)
-	adc	%eax, %eax
-	ret
-
-L(3):	mov	16(up), %r10
-	ADCSBB	(vp), %r8
-	ADCSBB	8(vp), %r9
-	ADCSBB	16(vp), %r10
-	mov	%r8, (rp)
-	mov	%r9, 8(rp)
-	mov	%r10, 16(rp)
-	setc	%al
-	ret
 EPILOGUE()
diff -r 23bc00ec2a06 -r 1a2742d53add mpn/x86_64/atom/aors_n.asm
--- a/mpn/x86_64/atom/aors_n.asm	Thu Nov 11 12:02:20 2010 +0100
+++ b/mpn/x86_64/atom/aors_n.asm	Thu Nov 11 14:09:58 2010 +0100
@@ -1,6 +1,6 @@
 dnl  X86-64 mpn_add_n, mpn_sub_n, optimized for Intel Atom.
 
-dnl  Copyright 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.
+dnl  Copyright 2003, 2004, 2005, 2007, 2008, 2010 Free Software Foundation, Inc.
 
 dnl  This file is part of the GNU MP Library.
 
@@ -63,15 +63,16 @@
 	jg	L(b3)
 
 L(b1):	mov	(%rsi), %r10
-	test	R32(%rcx), R32(%rcx)
-	bt	$0, R32(%r8)
+	test	%rcx, %rcx
 	jnz	L(gt1)
+	shr	R32(%r8)			C Set CF from argument
 	ADCSBB	(%rdx), %r10
 	mov	%r10, (%rdi)
 	mov	R32(%rcx), R32(%rax)		C zero rax
 	adc	R32(%rax), R32(%rax)
 	ret
-L(gt1):	ADCSBB	(%rdx), %r10
+L(gt1):	shr	R32(%r8)
+	ADCSBB	(%rdx), %r10
 	mov	8(%rsi), %r11
 	lea	16(%rsi), %rsi
 	lea	-16(%rdx), %rdx
@@ -81,12 +82,13 @@
 L(b2):	mov	(%rsi), %r9
 	mov	8(%rsi), %r10
 	lea	-8(%rdx), %rdx
-	test	R32(%rcx), R32(%rcx)
-	bt	$0, R32(%r8)
+	test	%rcx, %rcx
 	jnz	L(gt2)
+	shr	R32(%r8)
 	lea	-40(%rdi), %rdi
 	jmp	L(e2)
-L(gt2):	ADCSBB	8(%rdx), %r9
+L(gt2):	shr	R32(%r8)
+	ADCSBB	8(%rdx), %r9
 	mov	16(%rsi), %r11
 	lea	-8(%rsi), %rsi
 	lea	-8(%rdi), %rdi
@@ -95,12 +97,13 @@
 L(b3):	mov	(%rsi), %rax
 	mov	8(%rsi), %r9
 	mov	16(%rsi), %r10
-	test	R32(%rcx), R32(%rcx)
-	bt	$0, %r8
+	test	%rcx, %rcx
 	jnz	L(gt3)
+	shr	R32(%r8)
 	lea	-32(%rdi), %rdi
 	jmp	L(e3)
-L(gt3):	ADCSBB	(%rdx), %rax
+L(gt3):	shr	R32(%r8)
+	ADCSBB	(%rdx), %rax
 	jmp	L(m3)
 
 L(b0):	mov	(%rsi), %r11
# HG changeset patch
# User Marco Bodrato <bodrato@mail.dm.unipi.it>
# Date 1295976902 -3600
#      Tue Jan 25 18:35:02 2011 +0100
# Node ID aba92ed22197841297a7e272abc311ad09b550e9
# Parent  1a2742d53add129651d223c20eb9e0ecdcb2a544
Fix typos in documentation.

diff -r 1a2742d53add -r aba92ed22197 doc/gmp.texi
--- a/doc/gmp.texi	Thu Nov 11 14:09:58 2010 +0100
+++ b/doc/gmp.texi	Tue Jan 25 18:35:02 2011 +0100
@@ -15,7 +15,7 @@
 arithmetic library, version @value{VERSION}.
 
 Copyright 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
-2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
+2003, 2004, 2005, 2006, 2007, 2008, 2009, 2011 Free Software Foundation, Inc.
 
 Permission is granted to copy, distribute and/or modify this document under
 the terms of the GNU Free Documentation License, Version 1.3 or any later
@@ -4093,7 +4093,7 @@
 @code{mp_bits_per_limb}.
 
 @item
-@code{mpz_mul}, @code{mpz_mul_ui} and @code{mpz_mul_ui} need room for the sum
+@code{mpz_mul}, @code{mpz_mul_ui} and @code{mpz_mul_si} need room for the sum
 of the number of bits in their operands, but each rounded up to a multiple of
 @code{mp_bits_per_limb}.
 
@@ -8423,7 +8423,7 @@
 resulting matrix is applied to the inputs using @code{mpn_mul_1} and
 @code{mpn_submul_1}. Each iteration usually reduces the inputs by almost one
 limb. In the rare case of a large quotient, no progress can be made by
-examining just the most significant two limbs, and the quotient is computing
+examining just the most significant two limbs, and the quotient is computed
 using plain division.
 
 The resulting algorithm is asymptotically @math{O(N^2)}, just as the Euclidean
