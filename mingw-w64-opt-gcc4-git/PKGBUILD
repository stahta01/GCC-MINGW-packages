# Maintainer:  Tim Stahlhut <stahta01@gmail.com>

_pkg_prefix=${MINGW_PREFIX}/opt

_enable_info=no
_enable_bootstrap=no
_enable_threads=no
_threads="posix"
if [[ "$_enable_threads" == "yes" && "$_threads" == "posix" ]]; then
  _enable_libgomp=yes
else
  _enable_libgomp=no
fi
_enable_gcc_plugin=no
_enable_gcc_lto=yes

_enable_ada=yes
_enable_cxx=yes
_enable_fortran=no
_enable_objc=no

_basename=gcc
_realname=opt-gcc
pkgbase=mingw-w64-opt-${_basename}4-git
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}-git")
pkgver=4.7.4.d20140612+45.c2.g4d1f511d7f2
pkgrel=1
pkgdesc="GCC for the MinGW-w64"
arch=('any')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${MINGW_PACKAGE_PREFIX}-opt-toolchain")
makedepends=("${MINGW_PACKAGE_PREFIX}-binutils"
             "${MINGW_PACKAGE_PREFIX}-crt"
             "${MINGW_PACKAGE_PREFIX}-headers"
             "${MINGW_PACKAGE_PREFIX}-libiconv"
             "${MINGW_PACKAGE_PREFIX}-windows-default-manifest"
             "${MINGW_PACKAGE_PREFIX}-winpthreads"
             "${MINGW_PACKAGE_PREFIX}-zlib"
              'bison' 'diffutils' 'flex' 'lndir' 'make' 'patch' 'tar' 'git')
if [[ "$_enable_threads" == "yes" && "$_threads" == "posix" ]]; then
  makedepends+=("${MINGW_PACKAGE_PREFIX}-winpthreads")
fi
if [[ "$_enable_info" == "yes" ]]; then
  makedepends+=('texinfo')
fi
depends=(
  "${MINGW_PACKAGE_PREFIX}-crt"       # Should I move this package to /opt?
  "${MINGW_PACKAGE_PREFIX}-binutils" 
  "${MINGW_PACKAGE_PREFIX}-headers"   # Should I move this package to /opt?
  "${MINGW_PACKAGE_PREFIX}-zlib"      # Does it really depend on zlib?
)
if [[ "$_enable_threads" == "yes" && "$_threads" == "posix" ]]; then
  depends+=("${MINGW_PACKAGE_PREFIX}-winpthreads")  # Should I move this package to /opt?
fi
provides=("${MINGW_PACKAGE_PREFIX}-${_realname}")
conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}")
checkdepends=('dejagnu')
optdepends=()
options=('strip' '!debug' 'staticlibs' '!emptydirs' '!buildflags')

# resulted in C++ preprocessor "/lib/cpp" fails sanity check was caused by a build without C++ compiler
# Some time during versio 4.7 the requirement for a working C++ happenend!

#_git_branch=releases/gcc-4.7                           # SVN211571 Built and installed okay; running it resulted in C++ preprocessor "/lib/cpp" fails sanity check
#_git_commit='6cda24c97b5a1fa6cd27365c9aa90c95f45da4aa' # SVN205956
#_git_commit='50bf9f145c75b1fbc372e33610af14a8be328e58' # SVN199341
#_git_commit='911595bf2d485c0d1e067d9a94a867d9b8281502' # SVN197738 releases/gcc-4.7.3
#_git_commit='b058453f82a5dab2304c3ddf1ce646eaa748a475' # SVN191557 releases/gcc-4.7.2
#_git_commit='4c4c82223c4c3c975acc829f51cfeef77835fd87' # SVN191070
#_git_commit='539f5de0732db5c5accb038cbfb07a8d5cb89599' # SVN190178 Revert SVN190174
#_git_commit='442a102d1884867d646eea51b30b92e5aa3bc6ae' # SVN189667
#_git_commit='bbbfa18796b1bdb65834cebc880664e3d78877d4' # SVN189200
#_git_commit='c979aa52203ca4a6d7f981c3150af3d44ff2d4a6' # SVN188654
#_git_commit='412d31f03a14be123bb01a7a33a93fd8a68e23e6' # SVN188623
#_git_commit='' # SVN
#_git_commit='' # SVN
 _git_commit='edc56cde5124be76dd6ae3baff9eeb1fb61a1c41' # SVN188596 releases/gcc-4.7.1
#_git_commit='050358f1954ebb05dbb5e0747ce01f3c65f8774b' # SVN188513
#_git_commit='3156520d5df2a2e52b78f266cd750aa05b5ae64c' # SVN188167
#_git_commit='95d2db2008d8ac8772cd0fd634e6228376e632eb' # SVN188122
#_git_commit='c8f5c98afa95c15641c97672de12df0664e564ae' # SVN187205
#_git_commit='c45a86fd95f3afecb6dc2dc99232062845f4b570' # SVN186959

#_git_repo_url=git://gcc.gnu.org/git/gcc.git
#_sourcedir=${_basename}-git
#_git_repo_url=git://github.com/stahta01/gcc.git
#_sourcedir=my-${_basename}-git
_git_repo_url=git://github.com/stahta01/gcc_main_development.git
_sourcedir=main-${_basename}-git

if [ -n "$_git_branch" ]; then
  source=(${_sourcedir}::"${_git_repo_url}#branch=$_git_branch")
elif [ -n "$_git_tag" ]; then
  source=(${_sourcedir}::"${_git_repo_url}#tag=$_git_tag")
elif [ -n "$_git_commit" ]; then
  source=(${_sourcedir}::"${_git_repo_url}#commit=$_git_commit")
else
  source=(${_sourcedir}::"${_git_repo_url}")
fi
MPFR_VERSION=mpfr-2.4.2
GMP_VERSION=gmp-4.3.2
MPC_VERSION=mpc-0.8.1
noextract=("${MPFR_VERSION}.tar.bz2" "${GMP_VERSION}.tar.bz2" "${MPC_VERSION}.tar.gz")
source+=("ftp://gcc.gnu.org/pub/gcc/infrastructure/${MPFR_VERSION}.tar.bz2"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/${GMP_VERSION}.tar.bz2"
        "ftp://gcc.gnu.org/pub/gcc/infrastructure/${MPC_VERSION}.tar.gz")
source+=(
  '001-gcc-4.8-libstdc++export.patch'
  '002-gcc-4.7-stdthreads.patch'
  '130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch'
  '140-fix-for-windows-not-minding-non-existant-parent-dirs.patch'
  '150-windows-lrealpath-no-force-lowercase-nor-backslash.patch'
  '160-mingw-dont-ignore-native-system-header-dir.patch'
  '210-gcc-4.4-ktietz-libgomp.patch'
  '230-build-more-gnattools.mingw.patch'
  '802-handle-use-mingw-ansi-stdio.patch'
  '804-gcc-4.6.4-Fix-texi-docs-syntax-errors.patch'
  '806-gcc-4.8-libgcc-references.patch'
  '807-gcc-4.8-lambda-ICE.patch'
  '808-gcc-4.7.0-SVN-196003-PR-target-52122-add-LN_S_RECURSIVE.patch')
sha256sums=('SKIP'
            'c7e75a08a8d49d2082e4caee1591a05d11b9d5627514e678f02d66a124bcf2ba'
            '936162c0312886c21581002b79932829aa048cfaf9937c6265aeaa14f1cd1775'
            'e664603757251fd8a352848276497a4c79b7f8b21fd8aedd5cc0598a38fee3e4'
            '21191b4fd57ce5f230fcc97b4d9ae31bdc387d7c7c8e39436aa7e4268d278d3d'
            '5e0fc1437ce0b357e78d440692e3a30a7905a5f360a67928a95b14ec8d45365b'
            '800e81e4e6acb07f1b69cccc07a8dae8cdbf7c084ac00c8869e9b4cb205c655c'
            'd341bfb0e655f7daf0057aab899c3ac9e1363dbb6f0ca2cbffa6144e0ca2ad17'
            '0953d65d4fb3d681c76b6d6353e3cc424751a417872435f724d463001da66d43'
            'a7c5daced21086a01b3af9af4c46ee738ccfca6e67b3413771cb7ab81aa2a83f'
            'efd0d90eda577db320f1ed704efa5be87c4da09f1c95c3d067e0b563e477e579'
            'd16e76e0aa9e5a1c239424edc3a6da52785e82849b6e00850f8e2526e7f496d9'
            '3b9779b05198b4c814709f211623c0b1ebf8937f32eba29826cf15bfc29df9a3'
            '2cafd273a667f1130e9cd20c87cd5c83cda1100de9958b9dbbf656dcf29fd2bb'
            'cdedc021d5389e59066e6bbc0b053a7fd23386d7aace8f40a4c3f53045ef36a3'
            'dbbb202cd36aea01f3671997d4e53aad6674de5b774812d6a6460e58997a8117'
            'ceb22c62c285b550f8a6d65d8a30580e2aa0e283b80fb1586665d6ce37181d34')

# common package macros #
_apply_patch_with_msg() {
  for _patch in "$@"
  do
    if patch --dry-run -Nbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Applying ${_patch}"
      patch -Nbp1 -i "${srcdir}/${_patch}"
    elif patch --dry-run -Rbp1 -i "${srcdir}/${_patch}" > /dev/null 2>&1 ; then
      msg2 "Skipping ${_patch} because it likely was already applied"
    else
      msg2 "Skipping ${_patch} because it likely will fail"
    fi
  done
}

_extract_to_source_folder() {
    local tarfile="$1"
    local subfolder="$(echo "$tarfile" | sed 's/-.*$//')"
    if [ ! -d  "${srcdir}/${_sourcedir}/$subfolder" ]; then
        echo "Extracting ${tarfile} to ${_sourcedir}/$subfolder"
        mkdir -p "${srcdir}/${_sourcedir}/$subfolder"
        tar -x --strip-components=1 -f "${srcdir}/$tarfile" -C "${srcdir}/${_sourcedir}/$subfolder"
    fi
}
# =========================================== #

_git_base_commit=
_gcc_version=
_gcc_date=

pkgver() {
  cd ${srcdir}/${_sourcedir}
  printf "%s.d%s+%s.c%s.g%s" "$_gcc_version" "$_gcc_date" $(git rev-list --count $(git rev-list -1 ${_git_base_commit} gcc/DATESTAMP)..${_git_base_commit}) $(git rev-list --count ${_git_base_commit}..HEAD) $(git rev-parse --short ${_git_base_commit})
}

prepare() {
  cd ${srcdir}/${_sourcedir}
  _git_base_commit=$(git rev-parse HEAD)
  _gcc_version=$(head -n 34 gcc/BASE-VER | sed -e 's/.* //' | tr -d '"\n')
  _gcc_date=$(head -n 34 gcc/DATESTAMP | sed -e 's/.* //' | tr -d '"\n')

  echo "_gcc_version := ${_gcc_version}"
  echo "_gcc_date := ${_gcc_date}"

  _extract_to_source_folder       $MPFR_VERSION.tar.bz2
  _extract_to_source_folder       $GMP_VERSION.tar.bz2
  _extract_to_source_folder       $MPC_VERSION.tar.gz


  cd ${srcdir}/${_sourcedir}
  GIT_AM="git am --committer-date-is-author-date"

  _apply_patch_with_msg 001-gcc-4.8-libstdc++export.patch
  _apply_patch_with_msg 002-gcc-4.7-stdthreads.patch

  _apply_patch_with_msg 130-dont-escape-arguments-that-dont-need-it-in-pex-win32.c.patch

  _apply_patch_with_msg 140-fix-for-windows-not-minding-non-existant-parent-dirs.patch

  _apply_patch_with_msg 150-windows-lrealpath-no-force-lowercase-nor-backslash.patch

  ${GIT_AM} ${srcdir}/210-gcc-4.4-ktietz-libgomp.patch

  _apply_patch_with_msg 230-build-more-gnattools.mingw.patch

  _apply_patch_with_msg 802-handle-use-mingw-ansi-stdio.patch
  ${GIT_AM} ${srcdir}/804-gcc-4.6.4-Fix-texi-docs-syntax-errors.patch
  _apply_patch_with_msg 806-gcc-4.8-libgcc-references.patch
  _apply_patch_with_msg 807-gcc-4.8-lambda-ICE.patch
  _apply_patch_with_msg 808-gcc-4.7.0-SVN-196003-PR-target-52122-add-LN_S_RECURSIVE.patch

  #do not install libiberty
  sed -i 's/install_to_$(INSTALL_DEST) //' libiberty/Makefile.in

  # hack! - some configure tests for header files using "$CPP $CPPFLAGS"
  sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {libiberty,gcc}/configure

  sed -i 's/${prefix}\/mingw\//${prefix}\//g' configure

  local MINGW_NATIVE_PREFIX=$(cygpath -am ${MINGW_PREFIX}/${MINGW_CHOST})
  sed -i "s#\\/mingw\\/#${MINGW_NATIVE_PREFIX//\//\\/}\\/#g" gcc/config/i386/mingw32.h
}

build() {
  [[ -d ${srcdir}/build-${MINGW_CHOST} ]] && rm -rf ${srcdir}/build-${MINGW_CHOST}
  mkdir -p ${srcdir}/build-${MINGW_CHOST} && cd ${srcdir}/build-${MINGW_CHOST}

  local -a configure_opts

  case "${CARCH}" in
    i686)
      configure_opts+=("--disable-sjlj-exceptions")
      configure_opts+=("--with-dwarf2")
      LDFLAGS+=" -Wl,--large-address-aware"
      local _arch=i686
    ;;

    x86_64)
      local _arch=x86-64
    ;;
  esac

  case "${CARCH}" in
    i686)
      local _local_gcc32_prefix=/c/GreenApps32/gcc_4.6.0-mingw32_x86_generic/mingw
      export PATH="${_local_gcc32_prefix}/bin":$PATH
      export GNATBIND="${_local_gcc32_prefix}/bin/gnatbind"
      export GNATMAKE="${_local_gcc32_prefix}/bin/gnatmake"
      export CC="${_local_gcc32_prefix}/bin/gcc"
      export CXX="${_local_gcc32_prefix}/bin/g++"
    ;;

    x86_64)
      local _local_gcc64_prefix=/c/GreenApps64/gcc_4.6.0_mingw64_x86_64_K8+ada/mingw64
      export PATH="${_local_gcc64_prefix}/bin":$PATH
      export GNATBIND="${_local_gcc64_prefix}/bin/gnatbind"
      export GNATMAKE="${_local_gcc64_prefix}/bin/gnatmake"
      export CC="${_local_gcc64_prefix}/bin/gcc"
      export CXX="${_local_gcc64_prefix}/bin/g++"
    ;;
  esac

#  local _local_gcc_prefix=${MINGW_PREFIX}/opt
#  export PATH="${_local_gcc_prefix}/bin":$PATH
#  export GNATBIND="${_local_gcc_prefix}/bin/gnatbind"
#  export GNATMAKE="${_local_gcc_prefix}/bin/gnatmake"
#  export CC="${_local_gcc_prefix}/bin/gcc"
#  export CXX="${_local_gcc_prefix}/bin/g++"

  pacman -Q ${MINGW_PACKAGE_PREFIX}-crt
  gcc --version
  ld  --version
  if [ "$_enable_ada" == "yes" ]; then
    gnatbind  --version
  fi

  if [ "$_enable_bootstrap" == "yes" ]; then
    configure_opts+=("--enable-bootstrap")
  elif [ "$_enable_bootstrap" == "no" ]; then
    configure_opts+=("--disable-bootstrap")
  fi

  if [ "$_enable_gcc_lto" == "yes" ]; then
    configure_opts+=("--enable-lto")
  else
    configure_opts+=("--disable-lto")
  fi

  if [ "$_enable_gcc_plugin" == "yes" ]; then
    configure_opts+=("--enable-plugin")
  else
    configure_opts+=("--disable-plugin")
  fi

  if [ "$_enable_threads" == "yes" ]; then
    configure_opts+=("--enable-threads=${_threads}")
  elif [ "$_enable_threads" == "no" ]; then
    configure_opts+=("--disable-threads")
  fi

  if [ "$_enable_libgomp" == "yes" ]; then
    configure_opts+=("--enable-libgomp")
  elif [ "$_enable_libgomp" == "no" ]; then
    configure_opts+=("--disable-libgomp")
  fi

  local _languages="c"
  if [ "$_enable_gcc_lto" == "yes" ]; then
    _languages+=",lto"
  fi
  if [ "$_enable_ada" == "yes" ]; then
    _languages+=",ada"
  fi
  if [ "$_enable_cxx" == "yes" ]; then
    _languages+=",c++"
  fi
  if [ "$_enable_fortran" == "yes" ]; then
    _languages+=",fortran"
  fi
  if [ "$_enable_objc" == "yes" ]; then
    _languages+=",objc,obj-c++"
  fi

  echo "CPPFLAGS := ${CPPFLAGS}"
  echo "CFLAGS := ${CFLAGS}"
  echo "CXXFLAGS := ${CXXFLAGS}"
  echo "LDFLAGS := ${LDFLAGS}"

  ../${_sourcedir}/configure \
    --prefix=${_pkg_prefix} \
    --with-local-prefix=${MINGW_PREFIX}/local \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --with-native-system-header-dir=${MINGW_PREFIX}/${MINGW_CHOST}/include \
    --libexecdir=${_pkg_prefix}/lib \
    --with-arch=${_arch} \
    --with-tune=generic \
    --enable-languages=${_languages} \
    --enable-shared --enable-static \
    --disable-graphite \
    --enable-fully-dynamic-string \
    --enable-libstdcxx-time=yes \
    --disable-libstdcxx-pch \
    --disable-libstdcxx-debug \
    --enable-version-specific-runtime-libs \
    --without-cloog --without-isl \
    --disable-multilib \
    --enable-checking=release \
    --disable-rpath \
    --disable-win32-registry \
    --disable-nls \
    --disable-werror \
    --disable-symvers \
    --with-libiconv \
    --with-zlib=${MINGW_PREFIX} \
    --with-pkgversion="Rev${pkgrel}, Built by stahta01 -- Tim S" \
    --with-bugurl="https://github.com/stahta01/GCC-MINGW-packages/issues" \
    --with-gnu-as --with-gnu-ld \
    "${configure_opts[@]}"

  make all
}

check() {
  #cd ${srcdir}/build-${MINGW_CHOST}/gcc
  #if [ "$_enable_gcc_lto" == "yes" ]; then
    #make -j1 -k check-lto || true
  #fi
  cd ${srcdir}/build-${MINGW_CHOST}
  ##make -j1 -k check-c++ || true
  ##make -j1 -k check-c   || true
  if [ "$_enable_ada" == "yes" ]; then
    make -j1 -k check-ada || true
  fi
}

package() {
  cd ${srcdir}/build-${MINGW_CHOST}
  make DESTDIR=${pkgdir} install
}

